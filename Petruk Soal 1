#include <iostream>
#include <vector>
#include <sstream>
#include <cctype>

using namespace std;

bool isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '%' || c == '(' || c == ')';
}

bool isDigit(char c) {
    return isdigit(c);
}

vector<string> tokenize(const string &infix) {
    vector<string> tokens;
    stringstream ss;
    bool prevIsOperator = true;
    bool isFirstChar = true;

    for (size_t i = 0; i < infix.size(); ++i) {
        char c = infix[i];

        if (isDigit(c)) {
            ss << c;
            prevIsOperator = false;
            isFirstChar = false;
        } else if (isOperator(c)) {
            if (ss.str().length() > 0) {
                tokens.push_back(ss.str());
                ss.str("");
            }

            if (c == '-' && (prevIsOperator || (i > 0 && infix[i - 1] == '('))) {
                if (isFirstChar && i + 1 < infix.size() && infix[i + 1] == '(') {
                    tokens.push_back("-1");
                    tokens.push_back("*");
                } else if (isFirstChar) {
                    ss << c;
                    isFirstChar = false;
                } else {
                    tokens.push_back("-1");
                    tokens.push_back("*");
                }
            } else {
                tokens.push_back(string(1, c));
            }
            prevIsOperator = (c != ')');
            isFirstChar = false;
        } else if (c == ' ') {
            if (ss.str().length() > 0) {
                tokens.push_back(ss.str());
                ss.str("");
            }
        }
    }

    if (ss.str().length() > 0) {
        tokens.push_back(ss.str());
    }

    return tokens;
}

void printTokens(const vector<string> &tokens) {
    for (size_t i = 0; i < tokens.size(); ++i) {
        if (i > 0) {
            cout << " ";
        }
        cout << tokens[i];
    }
    cout << endl;
}

int main() {
    string infix;
    getline(cin, infix);

    vector<string> tokens = tokenize(infix);
    printTokens(tokens);

    return 0;
}
